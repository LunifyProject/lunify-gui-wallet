name: Build

on:
  push:
    paths-ignore:
      - '**/BUILDING.yml'
      - '**/README.md'
  pull_request:
    paths-ignore:
      - '**/BUILDING.yml'
      - '**/README.md'
  workflow_dispatch:
    inputs:
      run_release:
        description: 'Release the Artifacts'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      version_number:
        description: 'Release version'
        required: true
        default: 'v1.0.1'

env:
  USE_HARD_LINKS: false
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest, macos-13]
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Python linking
        if: matrix.os == 'macos-latest'
        run: |
          brew install python@3.9  # Install Python 3
          echo "/opt/homebrew/opt/python@3.9/bin" >> $GITHUB_PATH  # Add Python 3.9 to the PATH
          echo "/opt/homebrew/opt/python@3.9/libexec/bin" >> $GITHUB_PATH  # Add pip3.9 to the PATH

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm'

      - name: Install distutils for Python (macOS)
        if: matrix.os == 'macos-13'
        run: |
          python3 -m ensurepip --upgrade
          python3 -m pip install --upgrade setuptools
          
      - name: Rebuild native dependencies
        run: |
          npm rebuild --runtime=electron --target=11.5.0 --arch=x64

      - name: Install dependencies
        run: npm install

      - name: Build for ${{ matrix.os }}
        run: npm run build

      - name: Show files
        run: ls dist/electron/Packaged

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'macos-13' || matrix.os == 'macos-latest'
        with:
          name: Installer-${{ matrix.os }}
          path: dist/electron/Packaged/**.dmg

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: Installer-${{ matrix.os }}
          path: |
            dist/electron/Packaged/**.AppImage
            dist/electron/Packaged/**.deb

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: Installer-${{ matrix.os }}
          path: dist/electron/Packaged/**.exe

  download:
    name: Release Artifacts
    needs: ['build']
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_release == 'true' }}
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: .
        merge-multiple: false
        
    - name: Make 'release' directory
      run: mkdir release

    - name: Move Windows files
      run: mv Installer-windows-latest/lunify-gui-wallet-1.0.1-win.exe release/

    - name: Move Ubuntu files
      run: |
        mv Installer-ubuntu-latest/lunify-gui-wallet-1.0.1-linux.deb release/
        mv Installer-ubuntu-latest/lunify-gui-wallet-1.0.1-linux.AppImage release/

    - name: Move MacOS arm64 files
      run: |
        mv Installer-macos-latest/lunify-gui-wallet-1.0.1-mac.dmg release/lunify-gui-wallet-1.0.1-mac-arm64.dmg
        
    - name: Move MacOS x64 files
      run: |
        mv Installer-macos-13/lunify-gui-wallet-1.0.1-mac.dmg release/lunify-gui-wallet-1.0.1-mac-x64.dmg

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        name: Lunify ${{ github.event.inputs.version_number }}
        tag_name: ${{ github.event.inputs.version_number }}
        draft: true
        prerelease: false
        files: release/*
      env:
        GITHUB_TOKEN: ${{ env.GH_TOKEN }}